[[https://github.com/ROCKTAKEY/grugru][https://img.shields.io/github/tag/ROCKTAKEY/grugru.svg?style=flat-square]]
[[file:LICENSE][https://img.shields.io/github/license/ROCKTAKEY/grugru.svg?style=flat-square]]
[[https://github.com/ROCKTAKEY/grugru/actions][https://img.shields.io/github/workflow/status/ROCKTAKEY/grugru/CI/master.svg?style=flat-square]]
[[https://codecov.io/gh/ROCKTAKEY/grugru?branch=master][https://img.shields.io/codecov/c/github/ROCKTAKEY/grugru/master.svg?style=flat-square]]
* Grugru: Rotate text at point.
  With this package, you can rotate things at point.

  #+begin_center
  [[https://raw.githubusercontent.com/ROCKTAKEY/images/7baf9507a8fb9c20eda7395be1c9d91d0ae61c51/emacs-lisp-mode.gif]]
  Fig. 1 demo on =emacs-lisp-mode=

  [[https://raw.githubusercontent.com/ROCKTAKEY/images/7baf9507a8fb9c20eda7395be1c9d91d0ae61c51/c%2B%2B-mode.gif]]
  Fig. 2 demo on =c++-mode=
  #+end_center
* How to Use?
  You can interactively use the function =grugru=. This function rotate the thing at point
  if it is assigned to =grugru-*-grugru-alist=. You can assign rotated things with
  =grugru-define-on-major-mode=, =grugru-define-on-local-major-mode=, and =grugru-define-local=.
  If you use ~grugru~, you should assign ~grugru~ to 1 stroke key like ~M-g~.
  #+begin_src emacs-lisp :tangle yes
    (global-set-key (kbd "M-g") #'grugru)   ; Or other key.
  #+end_src

  If you want use default grugru, eval ~grugru-default-setup~. In the other words,
  add to your init.el:
  #+BEGIN_SRC emacs-lisp :tangle yes
  (grugru-default-setup)
  #+END_SRC
  If you want to change default action at point, you can use ~grugru-edit~,
  with which you can edit grugrus at point interactively. The change edited by this
  function is saved in ~grugru-edit-save-file~,
  and loaded by run ~grugru-edit-load~. So to load the change, you can write
  on init.el after ~(grugru-default-setup)~:
  #+begin_src emacs-lisp :tangle yes
  (grugru-edit-load)
  #+end_src

  If you want to use ivy or ido as completing-read, set ~grugru-edit-completing-function~.
  Or, you can use ~grugru-redefine-\*~ or ~grugru-remove-\*~
  for non-interactive editing of default setup.
** Examples
  #+BEGIN_SRC emacs-lisp -n
    ;; Define grugru on major-mode.
    (grugru-define-on-major-mode 'c-mode 'symbol '("unsigned" "signed"))
    (grugru-define-on-major-mode 'c-mode 'word '("get" "set"))
    ;; Now, you can toggle unsigned <=> signed and get <=> set
    ;; by running the command grugru in c-mode.

    ;; You can pass a list of symbol major-mode instead of one.
    (grugru-define-on-major-mode '(java-mode c++-mode) 'word '("get" "set"))

    ;; Define grugru on current major-mode.
    ;; Same as (grugru-define-on-major-mode major-mode 'symbol '("red" "green" "yellow"))
    ;; This should be run in some hook or function,
    ;; because major-mode is not confirmed if in init.el.
    (add-hook 'c-mode-common-hook
     (lambda ()
      (grugru-define-on-local-major-mode 'symbol '("red" "green" "yellow"))))

    ;; Define grugru on local. Should be defined in some hook or function,
    ;; because it is saved buffer local.
    (add-hook 'text-mode-hook
              (lambda ()
               (grugru-define-local 'word '("is" "was"))
               (grugru-define-local 'word '("I" "my" "me" "mine"))))

    ;; Define grugru globally. This is applied in all buffers.
    (grugru-define-global 'symbol '("yes" "no"))

    ;; You can use function instead of list of strings.
    (grugru-define-on-major-mode
     'c-mode 'symbol
     (lambda (arg)
      (cond
       ((string-match "a\\(.*\\)b" arg)
        (concat "b" (match-string 1 arg) "c"))
       ((string-match "b\\(.*\\)c" arg)
        (concat "a" (match-string 1 arg) "b")))))

    ;; You can also write like:
    (grugru-define-multiple
     (fundamental-mode
      . ((word . ("aaa" "bbb" "ccc"))
         ;; (symbol "xxx" "yyy" "zzz") is same as below.
         ;; You can use both.
         (symbol . ("xxx" "yyy" "zzz"))
         (word . ("abc" "def" "ghi"))))
      (word . ("aaaa" "bbbb" "cccc"))
      (symbol . ("xxxx" "yyyyy" "zzzzz"))
      (word . ("abcd" "defd" "ghid")))
    ;; or
    (grugru-define-multiple
     (fundamental-mode
       (word "aaa" "bbb" "ccc")
       (symbol "xxx" "yyy" "zzz")
       (word "abc" "def" "ghi"))
      (word "aaaa" "bbbb" "cccc")
      (symbol "xxxx" "yyyyy" "zzzzz")
      (word "abcd" "defd" "ghid"))

    ;; Above two examples are both expanded to:
    (progn
      (progn
         (grugru-define-on-major-mode 'fundamental-mode 'word '("aaa" "bbb" "ccc"))
         (grugru-define-on-major-mode 'fundamental-mode 'symbol '("xxx" "yyy" "zzz"))
         (grugru-define-on-major-mode 'fundamental-mode 'word '("abc" "def" "ghi")))
       (grugru-define-global 'word '("aaaa" "bbbb" "cccc"))
       (grugru-define-global 'symbol '("xxxx" "yyyyy" "zzzzz"))
       (grugru-define-global 'word '("abcd" "defd" "ghid")))


    ;; You can define function which rotate pre-specified texts.
    ;; For example, three-state can rotate only 2 tuples,
    ;; ("water" "ice" "vapor") and ("solid" "liquid" "gas"),
    ;; not any other tuples defined by grugru-define-global and so on.
    (grugru-define-function three-state ()
     "Docstring. This is optional."
     (symbol . ("water" "ice" "vapor"))
     (symbol . ("solid" "liquid" "gas")))
    ;; If you want to find the functions defined by `grugru-define-function'
    ;; with `describe-function', execute this:
    (grugru-find-function-integration-mode +1)
  #+END_SRC
* Interactive Functions
** ~grugru~
   This function rotates text at point.
   Rotated text is defined by ~grugru-define-*~ functions.
** ~grugru-select~
   This function replace text at point.
   You can select grugru and string replaced to.

   You can assign completing function to ~grugru-completing-function~.
** ~grugru-edit~
   This function edits grugru at point defined by default.

   First, select grugru from grugrus available at point.
   Then, edit the list in minibuffer.

   The change is saved to file ~grugru-edit-save-file~.
   You can assign completing function to ~grugru-completing-function~.
* Functions Defining grugru
** ~(grugru-define-global GETTER STRINGS-OR-FUNCTION)~
   Define global grugru with GETTER and STRINGS-OR-FUNCTION.

   GETTER is a function, or a symbol which is alias defined in ~grugru-getter-alist~.
   By default, symbol, word, char is available.
   If it is a function, it should return cons cell ~(begin . end)~
   which express things at point, and with no argument.

   STRINGS-OR-FUNCTION is list of string or function.

   List of string: If it includes string gotten by GETTER,
   the things gotten by GETTER is replaced to next string.

   Function: It is passed things gotten by GETTER, and should return string
   to replace the things to.

   You can use like:
   #+begin_src emacs-lisp :tangle yes
     ;; Replace "yes" at point, to "no".
     ;; Or replace "no" at point, to "yes".
     (grugru-define-global 'symbol '("yes" "no"))
   #+end_src
** ~(grugru-define-on-major-mode MAJOR GETTER STRINGS-OR-FUNCTION)~
   Define major-mode local grugru with GETTER and STRINGS-OR-FUNCTION.

   Same as ~grugru-define-global~, but grugru defined with this is applied
   only in buffer on MAJOR major-mode. MAJOR can be list of major-modes.
   #+begin_src emacs-lisp :tangle yes
     ;; Replace "yes" at point, to "no", or replace "no" at point, to "yes",
     ;; only in lisp-interaction-mode.
     (grugru-define-on-major-mode lisp-interaction-mode 'symbol '("yes" "no"))
   #+end_src
** ~(grugru-define-local GETTER STRINGS-OR-FUNCTION)~
   Define buffer-local grugru with GETTER and STRINGS-OR-FUNCTION.

   Same as ~grugru-define-global~, but grugru defined with this is applied
   only in buffer where eval this expression.
   #+begin_src emacs-lisp :tangle yes
     ;; This should be used in hook or others.
     ;; Because this definition is buffer-local.
     (add-hook 'text-mode-hook
                (lambda ()
                 (grugru-define-local 'word '("is" "was"))
                 (grugru-define-local 'word '("I" "my" "me" "mine"))))
   #+end_src
** ~(grugru-define-multiple &rest CLAUSES)~
   This function define multiple grugru.

   Each ~CLAUSE~ is:
   - ~(GETTER . STRINGS-OR-FUNCTION)~: means ~(grugru-define-global GETTER  STRINGS-OR-FUNCTION)~.
   - ~(MAJOR (GETTER . STRINGS-OR-FUNCTION)...)~: means ~(grugru-define-on-major-mode MAJOR GETTER  STRINGS-OR-FUNCTION)...~.
   - List of above.

   #+begin_src emacs-lisp :tangle yes
    (grugru-define-multiple
     (fundamental-mode
      . ((word . ("aaa" "bbb" "ccc"))
         ;; (symbol "xxx" "yyy" "zzz") is same as below.
         ;; You can use both.
         (symbol . ("xxx" "yyy" "zzz"))
         (word . ("abc" "def" "ghi"))))
      (word . ("aaaa" "bbbb" "cccc"))
      (symbol . ("xxxx" "yyyyy" "zzzzz"))
      (word . ("abcd" "defd" "ghid")))
    ;; or
    (grugru-define-multiple
     (fundamental-mode
       (word "aaa" "bbb" "ccc")
       (symbol "xxx" "yyy" "zzz")
       (word "abc" "def" "ghi"))
      (word "aaaa" "bbbb" "cccc")
      (symbol "xxxx" "yyyyy" "zzzzz")
      (word "abcd" "defd" "ghid"))

    ;; Above two examples are both expanded to:
    (progn
      (progn
         (grugru-define-on-major-mode 'fundamental-mode 'word '("aaa" "bbb" "ccc"))
         (grugru-define-on-major-mode 'fundamental-mode 'symbol '("xxx" "yyy" "zzz"))
         (grugru-define-on-major-mode 'fundamental-mode 'word '("abc" "def" "ghi")))
       (grugru-define-global 'word '("aaaa" "bbbb" "cccc"))
       (grugru-define-global 'symbol '("xxxx" "yyyyy" "zzzzz"))
       (grugru-define-global 'word '("abcd" "defd" "ghid")))
   #+end_src
** ~(grugru-define-function NAME () &optional DOCSTRING &rest BODY)~
   Define function which can roate only grugru defined by BODY.
   Each element of BODY is ~(GETTER . STRINGS-OR-FUNCTION)~,
   which meaning is same as ~grugru-define-*~ functions.
   #+begin_src emacs-lisp :tangle yes
     ;; The function `three-state' rotate like "water"=>"ice"=>"vapor"=>"water",
     ;; or "solid"=>"liquid"=>"gas"=>"solid".
     (grugru-define-function three-state ()
      "Docstring. This is optional."
      (symbol . ("water" "ice" "vapor"))
      (symbol . ("solid" "liquid" "gas")))

     ;; This sentense do NOT affect to the function `three-state'.
     (grugru-define-global 'symbol '("yes" "no"))
   #+end_src
* leaf-keyword ~:grugru~
  You can use ~:grugru~ keyword on [[https://github.com/conao3/leaf.el][leaf.el]], if you use [[https://github.com/conao3/leaf-keywords.el][leaf-keywords.el]].

  By default, ~leaf--name~ is used as major-mode.
  Or you can write major-mode obviously.
  #+begin_src emacs-lisp :tangle yes
    (leaf lisp-mode
     :grugru
     (symbol "nil" "t")
     (emacs-lisp-mode
      (word "add" "remove"))
     ...)
    ;; The section of `:grugru' means:
    (grugru-define-multiple
     (symbol "nil" "t")
     (emacs-lisp-mode
      (word "add" "remove")))
  #+end_src
* License
  This package is licensed by GPLv3. See [[file:LICENSE][LICENSE]].
