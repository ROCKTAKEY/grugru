[[https://github.com/ROCKTAKEY/grugru][https://img.shields.io/github/tag/ROCKTAKEY/grugru.svg?style=flat-square]]
[[file:LICENSE][https://img.shields.io/github/license/ROCKTAKEY/grugru.svg?style=flat-square]]
[[https://github.com/ROCKTAKEY/grugru/actions][https://img.shields.io/github/workflow/status/ROCKTAKEY/grugru/CI/master.svg?style=flat-square]]
* Grugru: Rotate text at point.
  With this package, you can rotate things at point.

  #+begin_center
  [[https://raw.githubusercontent.com/ROCKTAKEY/images/7baf9507a8fb9c20eda7395be1c9d91d0ae61c51/emacs-lisp-mode.gif]]
  Fig. 1 demo on =emacs-lisp-mode=

  [[https://raw.githubusercontent.com/ROCKTAKEY/images/7baf9507a8fb9c20eda7395be1c9d91d0ae61c51/c%2B%2B-mode.gif]]
  Fig. 2 demo on =c++-mode=
  #+end_center
* How to Use?
  You can intaractively use the function =grugru=. This function rotate the thing at point
  if it is asigned to =grugru-*-grugru-alist=. You can asign things rotated with
  =grugru-define-on-major-mode=, =grugru-define-on-local-major-mode=, and =grugru-define-local=.
  #+BEGIN_SRC emacs-lisp -n
    ;; Define grugru on major-mode.
    (grugru-define-on-major-mode 'c-mode 'symbol '("unsigned" "signed"))
    (grugru-define-on-major-mode 'c-mode 'word '("get" "set"))

    ;; Define grugru on current major-mode.
    ;; Same as (grugru-define-on-major-mode major-mode 'symbol '("red" "green" "yellow"))
    ;; This should be run in some hook or function,
    ;; because major-mode is not confirmed if in init.el.
    (grugru-define-on-local-major-mode 'symbol '("red" "green" "yellow"))

    ;; Define grugru on local. Should be defined in some hook or function,
    ;; because it is saved buffer local.
    (add-hook 'text-mode-hook
              (lambda ()
               (grugru-define-local 'word '("is" "was"))
               (grugru-define-local 'word '("I" "my" "me" "mine"))))

    ;; Define grugru globally. This is applied in all buffers.
    (grugru-define-global 'symbol '("yes" "no"))

    ;; You can use function instead of list of strings.
    (grugru-define-on-major-mode
     'c-mode 'symbol
     (lambda (arg)
      (cond
       ((string-match "a\\(.*\\)b" arg)
        (concat "b" (match-string 1 arg) "c"))
       ((string-match "b\\(.*\\)c" arg)
        (concat "a" (match-string 1 arg) "b")))))

  #+END_SRC

* License
  This package is licensed by GPLv3. See [[file:LICENSE][LICENSE]].
